%{
#include <cstdio>
#include <cstdlib>
#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <math.h>
#include <map>
#include "node.hpp"
#include "cxxopts.hpp"

extern void unknownFunctionError(std::string s);
extern void div0Error(void);
typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE yy_scan_string(const char *str);
extern void yy_delete_buffer(YY_BUFFER_STATE buffer);
extern int yylex();
extern int yyparse();
extern FILE *yyin;
extern void yyerror(const char *s);
std::ofstream dot;
Node *root;

%}

%union {
double number;
std::string *identifier;
class Node *node;
}

%type <node> expression
%token <identifier> IDENTIFIER
%token <number> NUMBER
%left '-' '+'
%left '*' '/'
%left NEG    /* negation--unary minus */
%right '^'   /* exponentiation        */

%%

line: expression { std::cout << std::setprecision(10) << $1->value() << "\n"; root = $1; YYACCEPT; }
     ;


expression: NUMBER                  { $$ = new Node("", $1); }
    | expression '+' expression     { $$ = new Node("+", $1->value() + $3->value(), $1, $3); }
    | expression '-' expression     { $$ = new Node("-", $1->value() - $3->value(), $1, $3); }
    | expression '*' expression     { $$ = new Node("*", $1->value() * $3->value(), $1, $3); }
    | expression '/' expression     {
                                      if($3->value()==0) { div0Error(); }
                                      else { $$ = new Node("/", $1->value() / $3->value(), $1, $3); }
                                    }
    | expression '^' expression     { $$ = new Node("^", pow($1->value(), $3->value()), $1, $3); }
    | IDENTIFIER '(' expression ')' {
                                      if(*$1=="sin")       $$ = new Node(*$1, sin($3->value()), $3);
                                      else if(*$1=="cos")  $$ = new Node(*$1, cos($3->value()), $3);
                                      else if(*$1=="tan")  $$ = new Node(*$1, tan($3->value()), $3);
                                      else if(*$1=="asin") $$ = new Node(*$1, asin($3->value()), $3);
                                      else if(*$1=="acos") $$ = new Node(*$1, acos($3->value()), $3);
                                      else if(*$1=="atan") $$ = new Node(*$1, atan($3->value()), $3);
                                      else if(*$1=="log")  $$ = new Node(*$1, log($3->value()), $3);
                                      else if(*$1=="exp")  $$ = new Node(*$1, exp($3->value()), $3);
                                      else if(*$1=="sqrt") $$ = new Node(*$1, sqrt($3->value()), $3);
                                      else if(*$1=="abs")  $$ = new Node(*$1, abs($3->value()), $3);
                                      else unknownFunctionError(*$1);
                                    }
      | '-' expression %prec NEG    { $$ = new Node("-", -$2->value(), $2); }
      | '(' expression ')'          { $$ = new Node("()", $2->value(), $2); }
      ;

%%

int main(int argc, char* argv[]) {
  std::string output;
  std::string term;
  try {
    cxxopts::Options options(argv[0], "Translates a mathematical term into a Graphviz file");
    options
      .positional_help("mathematical term");

    options
      .add_options()

      ("h,help", "Print help")

      ("o,output", "Output file", cxxopts::value<std::string>()->default_value("term.dot"))

      ("term", "mathematical term", cxxopts::value<std::string>());

      options.parse_positional({"term"});
      auto result = options.parse(argc, argv);

      if (result.count("help")) {
        std::cout << options.help({"", "Group"}) << std::endl;
        exit(0);
      }

      output = result["output"].as<std::string>();

      if(!result.count("term")) {
        std::cerr << options.help({"", "Group"}) << std::endl;
        exit(1);
      }
      term = result["term"].as<std::string>();

  } catch (const cxxopts::OptionException& e) {
    std::cerr << "Error parsing options: " << e.what() << std::endl;
    exit(1);
  }

  // parse input into tree of nodes referenced by root
  char *str = (char *) term.c_str();
  YY_BUFFER_STATE buffer = yy_scan_string(str);
  yyparse();
  yy_delete_buffer(buffer);

  // write tree of nodes into dot file
  dot.open(output);
  dot << std::setprecision(10);
  dot << "digraph G {\n";
  dot << "    node [shape=record,fontname=\"Arial\"];\n";
  dot << *root;
  dot << "}\n";
  dot.close();
  delete root;

	return 0;
}

std::ostream& operator<<(std::ostream &os, const Node& n) {
    os << "    " << n.id() << " [label=\"";
    if(n.label().length()>0) os << "{" << n.label() << "|" << n.value() << "}";
    else os << n.value();
    os << "\"]\n";
    for(std::vector<Node*>::const_iterator it = n.children().begin(); it != n.children().end(); ++it) {
        const Node *child = *it;
        os << "    " << n.id() << " -> " << child->id() << "\n";
        os << *child;
    }
    return os;
}

void yyerror(const char *s) {
	std::cerr << "Error in term: " << s << "\n";
	exit(1);
}

void unknownFunctionError(std::string s) {
    std::cerr << "Error: unknown function '" << s << "'\n";
    exit(1);
}

void div0Error(void) {
    std::cerr << "Error: division by zero\n";
    exit(1);
}
